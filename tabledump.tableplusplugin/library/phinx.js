'use strict';

import { camelize } from './helper';

function getColumnMigrate(columnName, columnType, isNullable, defaultVal, extra, columnComment) {
    var typeArr = columnType.split('(');
    var typeOnly = typeArr[0];
    var typeLength = '';
    var typePrecision = '';
    if (typeArr.length > 1) {
        typeLength = typeArr[1].replace(')', '');
        var precisionArr = typeLength.split(',');
        if (precisionArr.length > 1) {
            typeLength = precisionArr[0];
            typePrecision = precisionArr[1];
        }
    }
    // parse options for the column
    var columnOptions = {};
    if (columnType.includes('unsigned')) {
        columnOptions.signed = 'false';
    }
    typeLength = typeLength.replace(' unsigned', '');
    if (isNullable.toLowerCase().startsWith('y')) {
        columnOptions.null = 'true';
    }
    if (defaultVal === 'NULL') {
        columnOptions.default = null;
    } else if (parseInt(defaultVal) == defaultVal || parseFloat(defaultVal) == defaultVal) {
        columnOptions.default = defaultVal;
    } else {
        columnOptions.default = "'" + defaultVal + "'";
    }
    if (typeof columnComment != 'undefined' && columnComment) {
        columnOptions.comment = "'" + columnComment.replace(/'/g, "\\'") + "'";
    }
    if (typeLength) {
        columnOptions.length = typeLength;
    }
    // init column def
    var columnDef = "addColumn('" + columnName + "', ";
    // map phinx column type
    var phinxType = '';
    switch (typeOnly) {
        case 'varchar':
            phinxType = 'string';
            break;

        case 'int':
        case 'mediumint':
            phinxType = 'integer';
            break;

        case 'bigint':
            phinxType = 'biginteger';
            break;

        case 'tinyint':
            phinxType = 'tinyinteger';
            break;

        case 'float':
        case 'double':
        case 'decimal':
            phinxType = typeOnly;
            columnOptions.precision = typePrecision;
            break;

        default:
            phinxType = typeOnly;
            break;
    }
    // add phinx column type
    columnDef += "'" + phinxType + "'";
    // parse column options and output as PHP style array
    if (Object.entries(columnOptions).length > 0) {
        columnDef += ', [';
        var optCount = 1;
        for (const [key, value] of Object.entries(columnOptions)) {
            if (optCount !== 1) {
                columnDef += ', ';
            }
            columnDef += "'" + key + "' => " + value;
            optCount++;
        }
        // close column options
        columnDef += ']';
    }
    // close column definition
    columnDef += ')';
    return columnDef;

    // TODO autoincrement
    if (extra) {
        switch (extra) {
            case "auto_increment":
                migration += "->autoIncrement()";
                break;
        }
    }


}

function getHeader() {

}

function dumpTableAsPhinx(context, item) {
    var nameCamelcase = camelize(item.name());
    var columnNames = [];
    var columnTypes = [];
    var isNullables = [];
    var defaultVals = [];
    var columnComments = [];
    var extras = [];
    var query;
    var driver = context.driver();
    var header = `<?php

    declare(strict_types=1);

    use Phinx\\Migration\\AbstractMigration;

    /**
     * Migration auto-generated by TablePlus ${Application.appVersion()}(${Application.appBuild()})
     * @author https://tableplus.com
     * @source https://github.com/TablePlus/tabledump
     */
    final class Create${nameCamelcase} extends AbstractMigration
    {
      /**
       * Run the migration
       * @return void
       */
      public function up(): void
      {
          $this->table('${item.name()}', ['id' => false])\n`;

    switch (driver) {
        case 'MySQL':
        case 'MariaDB':
            query = `SELECT ordinal_position as ordinal_position,column_name as column_name,column_type,is_nullable as is_nullable,column_default as column_default,extra as extra,column_key,column_comment AS comment FROM information_schema.columns WHERE table_schema='${item.schema()}'AND table_name='${item.name()}';`;
            break;
        default:
            context.alert('Error', driver + ' is not supported');
            return;
    }
    context.execute(query, res => {
        res.rows.sort((l, r) => {
            return (
                parseInt(l.raw('ordinal_position')) >
                parseInt(r.raw('ordinal_position'))
            );
        });

        res.rows.forEach(row => {
            let columnName = row.raw('column_name');
            let columnType = row.raw('column_type');
            let isNullable = row.raw('is_nullable');
            let defaultVal = row.raw('column_default');
            let extra = row.raw('extra');
            columnNames.push(columnName);
            columnTypes.push(columnType);
            isNullables.push(isNullable);
            defaultVals.push(defaultVal);
            extras.push(extra);
            columnComments.push(row.raw('comment'));
        });

        var result = header;

        for (let i = 0; i < columnNames.length; i++) {
            var columnMigrate = getColumnMigrate(
                columnNames[i],
                columnTypes[i],
                isNullables[i],
                defaultVals[i],
                extras[i],
                columnComments[i]
            );
            if (columnMigrate != null) {
                result += `            ->${columnMigrate}\n`;
            } else {
                result += `            \/\/ ${columnNames[i]}\n`
            }
        }
        // TODO foreign keys from `INNODB_SYS_FOREIGN`?
        // TODO indexes from the `column_type` value?
        result += `            ->create();
      }

      /**
       * Reverse the migration
       * @return void
       */
      public function down(): void
      {
        $table = $this->table('${item.name()}');
        $table->truncate();
        $table->drop()->save();
      }
  }
  `;
        SystemService.insertToClipboard(result);
        SystemService.notify(
            'Phinx export',
            item.type() + ' ' + item.name() + ' export statement is copied!'
        );
    });
}

export { dumpTableAsPhinx };
