/* globals Application,SystemService */
'use strict';

import { camelize } from './helper';

/**
 * Main entry point to dumping table definitions as a Phalcon Model
 * @param {*} tblPlusContext
 * @param {*} tblPlusCurrentTable
 * @returns void
 */
function dumpTableAsPhalconModel(tblPlusContext, tblPlusCurrentTable) {
    var nameCamelcase = camelize(tblPlusCurrentTable.name());
    var columns = [];
    var query;
    var driver = tblPlusContext.driver();
    var now = new Date();
    var completedQueries = 0;
    var header;
    // build query to get a columns from the DB
    if (driver !== 'MariaDB' && driver !== 'MySQL') {
        tblPlusContext.alert('Error', driver + ' is not supported');
        return;
    }
    // the header content of the PHP file before the table is defined
    header = `<?php

    declare(strict_types=1);

    \/\/ namespace MyNamespace;

    use Phalcon\\Mvc\\Model;

    /**
     * ${nameCamelcase} Model auto-generated by TablePlus ${Application.appVersion()}(${Application.appBuild()}) on ${now}
     * @author https://tableplus.com
     * @source https://github.com/TablePlus/tabledump
     */
    class ${nameCamelcase} extends Model
    {`;

    // build query to get a columns from the DB
    switch (driver) {
        case 'MySQL':
        case 'MariaDB':
            query = `SELECT ordinal_position as ordinal_position,column_name as column_name,column_type,is_nullable as is_nullable,column_default as column_default,extra as extra,column_key,column_comment AS comment FROM information_schema.columns WHERE table_schema='${tblPlusCurrentTable.schema()}'AND table_name='${tblPlusCurrentTable.name()}';`;
            break;
        default:
            tblPlusContext.alert('Error', driver + ' is not supported');
            return;
    }

    // get all the columns for the table by querying the DB
    query = `SELECT ordinal_position as ordinal_position,column_name as column_name,column_type,is_nullable as is_nullable,column_default as column_default,extra as extra,column_key,column_comment AS comment FROM information_schema.columns WHERE table_schema='${tblPlusCurrentTable.schema()}'AND table_name='${tblPlusCurrentTable.name()}';`;
    tblPlusContext.execute(query, res => {
        res.rows.sort((l, r) => {
            return (
                parseInt(l.raw('ordinal_position')) >
                parseInt(r.raw('ordinal_position'))
            );
        });
        // parse the results
        res.rows.forEach(row => {
            let columnName = row.raw('column_name');
            columns.push({
                name: columnName,
                type: row.raw('column_type'),
                nullable: row.raw('is_nullable'),
                default: row.raw('column_default'),
                extra: row.raw('extra'),
                comment: row.raw('comment')
            });
        });
        // SystemService.notify('completed column defs');
        completedQueries++;
        if (completedQueries === 1) {
            writeModelDumpToClipboard(columns, header, tblPlusCurrentTable);
        }
    });
}

/**
 * Copies the built model PHP code to the clipboard and sends a system notification in TablePlus
 * @param {*} columns
 * @param {*} header
 * @param {*} tblPlusCurrentTable
 * @returns void
 */
function writeModelDumpToClipboard(columns, header, tblPlusCurrentTable) {
    var result = header;
    // SystemService.notify('dumping to clipboard');
    for (let i = 0; i < columns.length; i++) {
        var type = '';
        var typeArr = columns[i].type.split('(');
        var typeOnly = typeArr[0];

        if (columns[i].nullable.toLowerCase().startsWith('y')) {
            type += 'null|';
        }
        switch (typeOnly) {
            case 'varchar':
            case 'text':
            case 'char':
            case 'datetime':
            case 'timestamp':
            case 'json':
            case 'uuid':
                type += 'string';
                break;

            case 'int':
            case 'mediumint':
            case 'bigint':
            case 'tinyint':
                type += 'int';
                break;

            case 'float':
            case 'double':
            case 'decimal':
                type += 'float';
                break;

            default:
                type += typeOnly;
                break;

        }
        var comment = (columns[i].comment != '') ? columns[i].comment : columns[i].name;
        // TODO highlight primary keys (`@Primary`)
        // TODO highlight identity columns (`@Identity`) - check extra for `auto_increment`
        // TODO full support for Phalcon Annotations: https://docs.phalcon.io/5.0/en/db-models-metadata#annotations
        result += `
        /**
         * ${comment}
         * @var ${type}
         */
        public $${columns[i].name};`;
    }

    // append the PHP footer code to the output to complete the model class
    result += `

        /**
         * Initialize model: set table source, define relationships to other models, configure behaviours etc
         */
        public function initialize(): void
        {
            $this->setSource('${tblPlusCurrentTable.name()}');
            \/\/ $this->setup(['exceptionOnFailedSave' => true]);
        }
    }\n`;
    // copy result to clipboard and notify user
    SystemService.insertToClipboard(result);
    SystemService.notify(
        'Phalcon model export',
        tblPlusCurrentTable.type() + ' ' + tblPlusCurrentTable.name() + ' export code is copied!'
    );
}

export { dumpTableAsPhalconModel };
